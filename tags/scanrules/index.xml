<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scanrules on ZAP</title>
    <link>/tags/scanrules/</link>
    <description>Recent content in Scanrules on ZAP</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 22 Jul 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="/tags/scanrules/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Timing Related Scan Rule Changes</title>
      <link>/blog/2025-07-22-timing-rule-changes/</link>
      <pubDate>Tue, 22 Jul 2025 00:00:00 +0000</pubDate>
      <guid>/blog/2025-07-22-timing-rule-changes/</guid>
      <description>Scan rules related to time based attacks have been split or renamed.</description>
    </item>
    <item>
      <title>ZAP Scripts are now Full Scan Rules!</title>
      <link>/blog/2024-07-17-script-scan-rules/</link>
      <pubDate>Wed, 17 Jul 2024 00:00:00 +0000</pubDate>
      <guid>/blog/2024-07-17-script-scan-rules/</guid>
      <description>ZAP scripts can now do everything that scan rules can.</description>
    </item>
    <item>
      <title>Polyfill.io Script Detection</title>
      <link>/blog/2024-06-27-polyfill.io-script-detection/</link>
      <pubDate>Thu, 27 Jun 2024 00:00:00 +0000</pubDate>
      <guid>/blog/2024-06-27-polyfill.io-script-detection/</guid>
      <description>A new scan rule which allows you to find out which of your sites are loading scripts from polyfill.io really quickly.</description>
    </item>
    <item>
      <title>Spring4Shell Detection with ZAP</title>
      <link>/blog/2022-04-04-spring4shell-detection-with-zap/</link>
      <pubDate>Mon, 04 Apr 2022 00:00:00 +0000</pubDate>
      <guid>/blog/2022-04-04-spring4shell-detection-with-zap/</guid>
      <description>How to detect Spring4Shell with the new Spring4Shell Alpha Active Scan Rule.</description>
    </item>
    <item>
      <title>ZAP and Log4Shell</title>
      <link>/blog/2021-12-10-zap-and-log4shell/</link>
      <pubDate>Fri, 10 Dec 2021 00:00:00 +0000</pubDate>
      <guid>/blog/2021-12-10-zap-and-log4shell/</guid>
      <description>ZAP appears to be impacted by the Log4Shell vulnerability - CVE-2021-44228. We have released ZAP 2.11.1 which fixes the problem, this blog post gives more information and the impact on older versions of ZAP.</description>
    </item>
    <item>
      <title>Hacking ZAP #4 - Active scan rules</title>
      <link>/blog/2014-04-30-hacking-zap-4-active-scan-rules/</link>
      <pubDate>Wed, 30 Apr 2014 00:00:00 +0000</pubDate>
      <guid>/blog/2014-04-30-hacking-zap-4-active-scan-rules/</guid>
      <description>&lt;p&gt;Welcome to a &lt;a href=&#34;https://github.com/zaproxy/zaproxy/wiki/Development#hacking-zap&#34;&gt;series of blog posts&lt;/a&gt; aimed at helping you “hack the ZAP source code”.&lt;br&gt;&#xA;The previous post in this series is: &lt;a href=&#34;/blog/2014-04-03-hacking-zap-3-passive-scan-rules/&#34;&gt;Hacking ZAP #3 - Passive scan rules&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Active scan rules are another relatively simple way to enhance ZAP. Active scan rules attack the server, and therefore are only run when&#xA;explicitly invoked by the user. You should only use active scan rules against applications that you have permission to attack.&lt;br&gt;&#xA;You can also write active scan rules dynamically using scripts, as we will see later in this series, but even then it&amp;rsquo;s very useful to understand&#xA;some of the concepts underlying classes available to you.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hacking ZAP #3 - Passive scan rules</title>
      <link>/blog/2014-04-03-hacking-zap-3-passive-scan-rules/</link>
      <pubDate>Thu, 03 Apr 2014 00:00:00 +0000</pubDate>
      <guid>/blog/2014-04-03-hacking-zap-3-passive-scan-rules/</guid>
      <description>&lt;p&gt;Welcome to a &lt;a href=&#34;https://github.com/zaproxy/zaproxy/wiki/Development#hacking-zap&#34;&gt;series of blog posts&lt;/a&gt; aimed at helping you “hack the ZAP source&#xA;code”.&lt;br&gt;&#xA;The previous post in this series is: &lt;a href=&#34;/blog/2014-03-20-hacking-zap-2-getting-started/&#34;&gt;Hacking ZAP #2 - Getting Started&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;One of the easiest ways to enhance ZAP is to write new passive scan rules.&lt;br&gt;&#xA;Passive scan rules are used to warn the user of potential vulnerabilities that can be detected passively - they are not allowed to make any new&#xA;requests or manipulate the requests or responses in any way.&lt;br&gt;&#xA;They typically run against all of the requests and responses that flow through ZAP.&lt;br&gt;&#xA;Passive rules run in separate background thread so that they have as little effect on performance as possible.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
