<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SYSTEMIC on ZAP</title>
    <link>/alerttags/systemic/</link>
    <description>Recent content in SYSTEMIC on ZAP</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="/alerttags/systemic/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Absence of Anti-CSRF Tokens</title>
      <link>/docs/alerts/10202/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10202/</guid>
      <description>&lt;p&gt;No Anti-CSRF tokens were found in a HTML submission form.&#xA;A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Anti-CSRF Tokens Check</title>
      <link>/docs/alerts/20012/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/20012/</guid>
      <description>&lt;p&gt;A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Charset Mismatch</title>
      <link>/docs/alerts/90011/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/90011/</guid>
      <description>&lt;p&gt;This check identifies responses where the HTTP Content-Type header declares a charset different from the charset defined by the body of the HTML or XML. When there&amp;rsquo;s a charset mismatch between the HTTP header and content body Web browsers can be forced into an undesirable content-sniffing mode to determine the content&amp;rsquo;s correct character set.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Content Security Policy (CSP) Header Not Set</title>
      <link>/docs/alerts/10038-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10038-1/</guid>
      <description>&lt;p&gt;Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Content Security Policy (CSP) Report-Only Header Found</title>
      <link>/docs/alerts/10038-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10038-3/</guid>
      <description>&lt;p&gt;The response contained a Content-Security-Policy-Report-Only header, this may indicate a work-in-progress implementation, or an oversight in promoting pre-Prod to Prod, etc.&lt;/p&gt;&#xA;&lt;p&gt;Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Content-Type Header Empty</title>
      <link>/docs/alerts/10019-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10019-2/</guid>
      <description>&lt;p&gt;The Content-Type header was either missing or empty.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Content-Type Header Missing</title>
      <link>/docs/alerts/10019-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10019-1/</guid>
      <description>&lt;p&gt;The Content-Type header was either missing or empty.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cookie No HttpOnly Flag</title>
      <link>/docs/alerts/10010/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10010/</guid>
      <description>&lt;p&gt;A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cookie Poisoning</title>
      <link>/docs/alerts/10029/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10029/</guid>
      <description>&lt;p&gt;This check looks at user-supplied input in query string parameters and POST data to identify where cookie parameters might be controlled. This is called a cookie poisoning attack, and becomes exploitable when an attacker can manipulate the cookie in various ways. In some cases this will not be exploitable, however, allowing URL parameters to set cookie values is generally considered a bug.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cookie Slack Detector</title>
      <link>/docs/alerts/90027/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/90027/</guid>
      <description>&lt;p&gt;Repeated GET requests: drop a different cookie each time, followed by normal request with all cookies to stabilize session, compare responses against original baseline GET. This can reveal areas where cookie based authentication/attributes are not actually enforced.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cookie with Invalid SameSite Attribute</title>
      <link>/docs/alerts/10054-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10054-3/</guid>
      <description>&lt;p&gt;A cookie has been set with an invalid SameSite attribute value, which means that the cookie can be sent as a result of a &amp;lsquo;cross-site&amp;rsquo; request. The SameSite attribute is an effective counter measure to cross-site request forgery, cross-site script inclusion, and timing attacks.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cookie with SameSite Attribute None</title>
      <link>/docs/alerts/10054-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10054-2/</guid>
      <description>&lt;p&gt;A cookie has been set with its SameSite attribute set to &amp;ldquo;none&amp;rdquo;, which means that the cookie can be sent as a result of a &amp;lsquo;cross-site&amp;rsquo; request. The SameSite attribute is an effective counter measure to cross-site request forgery, cross-site script inclusion, and timing attacks.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cookie without SameSite Attribute</title>
      <link>/docs/alerts/10054-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10054-1/</guid>
      <description>&lt;p&gt;A cookie has been set without the SameSite attribute, which means that the cookie can be sent as a result of a &amp;lsquo;cross-site&amp;rsquo; request. The SameSite attribute is an effective counter measure to cross-site request forgery, cross-site script inclusion, and timing attacks.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cookie Without Secure Flag</title>
      <link>/docs/alerts/10011/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10011/</guid>
      <description>&lt;p&gt;A cookie has been set without the secure flag, which means that the cookie can be accessed via unencrypted connections.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CORS Header</title>
      <link>/docs/alerts/40040-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/40040-1/</guid>
      <description>&lt;p&gt;Cross-Origin Resource Sharing (CORS) is an HTTP-header based mechanism that allows a server to indicate any other origins (domain, scheme, or port) than its own from which a browser should permit loading of resources. It relaxes the Same-Origin Policy (SOP).&lt;/p&gt;</description>
    </item>
    <item>
      <title>CORS Misconfiguration</title>
      <link>/docs/alerts/40040-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/40040-2/</guid>
      <description>&lt;p&gt;This CORS misconfiguration could allow an attacker to perform AJAX queries to the vulnerable website from a malicious page loaded by the victim&amp;rsquo;s user agent.&#xA;In order to perform authenticated AJAX queries, the server must specify the header &amp;ldquo;Access-Control-Allow-Credentials: true&amp;rdquo; and the &amp;ldquo;Access-Control-Allow-Origin&amp;rdquo; header must be set to null or the malicious page&amp;rsquo;s domain. Even if this misconfiguration doesn&amp;rsquo;t allow authenticated AJAX requests, unauthenticated sensitive content can still be accessed (e.g intranet websites).&#xA;A malicious page can belong to a malicious website but also a trusted website with flaws (e.g XSS, support of HTTP without TLS allowing code injection through MITM, etc).&lt;/p&gt;</description>
    </item>
    <item>
      <title>CORS Misconfiguration</title>
      <link>/docs/alerts/40040-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/40040-3/</guid>
      <description>&lt;p&gt;This CORS misconfiguration could allow an attacker to perform AJAX queries to the vulnerable website from a malicious page loaded by the victim&amp;rsquo;s user agent.&#xA;In order to perform authenticated AJAX queries, the server must specify the header &amp;ldquo;Access-Control-Allow-Credentials: true&amp;rdquo; and the &amp;ldquo;Access-Control-Allow-Origin&amp;rdquo; header must be set to null or the malicious page&amp;rsquo;s domain. Even if this misconfiguration doesn&amp;rsquo;t allow authenticated AJAX requests, unauthenticated sensitive content can still be accessed (e.g intranet websites).&#xA;A malicious page can belong to a malicious website but also a trusted website with flaws (e.g XSS, support of HTTP without TLS allowing code injection through MITM, etc).&lt;/p&gt;</description>
    </item>
    <item>
      <title>CRLF Injection</title>
      <link>/docs/alerts/40003/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/40003/</guid>
      <description>&lt;p&gt;Cookie can be set via CRLF injection. It may also be possible to set arbitrary HTTP response headers. In addition, by carefully crafting the injected response using cross-site script, cache poisoning vulnerability may also exist.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cross-Domain JavaScript Source File Inclusion</title>
      <link>/docs/alerts/10017/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10017/</guid>
      <description>&lt;p&gt;The page includes one or more script files from a third-party domain.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cross-Domain Misconfiguration</title>
      <link>/docs/alerts/10098/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10098/</guid>
      <description>&lt;p&gt;Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CSP: Failure to Define Directive with No Fallback</title>
      <link>/docs/alerts/10055-13/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10055-13/</guid>
      <description>&lt;p&gt;The Content Security Policy fails to define one of the directives that has no fallback. Missing/excluding them is the same as allowing anything.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CSP: Header &amp; Meta</title>
      <link>/docs/alerts/10055-12/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10055-12/</guid>
      <description>&lt;p&gt;The message contained both CSP specified via header and via Meta tag. It was not possible to union these policies in order to perform an analysis. Therefore, they have been evaluated individually.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CSP: Malformed Policy (Non-ASCII)</title>
      <link>/docs/alerts/10055-9/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10055-9/</guid>
      <description>&lt;p&gt;Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CSP: Meta Policy Invalid Directive</title>
      <link>/docs/alerts/10055-11/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10055-11/</guid>
      <description>&lt;p&gt;The policy specified via meta element contains either or both the sandbox or frame-ancestors directive, which are not permitted inside meta CSP definitions.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CSP: Notices</title>
      <link>/docs/alerts/10055-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10055-3/</guid>
      <description>&lt;p&gt;Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CSP: script-src unsafe-eval</title>
      <link>/docs/alerts/10055-10/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10055-10/</guid>
      <description>&lt;p&gt;Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CSP: script-src unsafe-hashes</title>
      <link>/docs/alerts/10055-7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10055-7/</guid>
      <description>&lt;p&gt;Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CSP: script-src unsafe-inline</title>
      <link>/docs/alerts/10055-5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10055-5/</guid>
      <description>&lt;p&gt;Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CSP: style-src unsafe-hashes</title>
      <link>/docs/alerts/10055-8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10055-8/</guid>
      <description>&lt;p&gt;Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CSP: style-src unsafe-inline</title>
      <link>/docs/alerts/10055-6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10055-6/</guid>
      <description>&lt;p&gt;Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CSP: Wildcard Directive</title>
      <link>/docs/alerts/10055-4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10055-4/</guid>
      <description>&lt;p&gt;Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CSP: X-Content-Security-Policy</title>
      <link>/docs/alerts/10055-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10055-1/</guid>
      <description>&lt;p&gt;Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CSP: X-WebKit-CSP</title>
      <link>/docs/alerts/10055-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10055-2/</guid>
      <description>&lt;p&gt;Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Deprecated Feature Policy Header Set</title>
      <link>/docs/alerts/10063-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10063-2/</guid>
      <description>&lt;p&gt;The header has now been renamed to Permissions-Policy.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Directory Browsing</title>
      <link>/docs/alerts/0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/0/</guid>
      <description>&lt;p&gt;It is possible to view the directory listing. Directory listing may reveal hidden scripts, include files, backup source files, etc. which can be accessed to read sensitive information.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Directory Browsing</title>
      <link>/docs/alerts/10033/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10033/</guid>
      <description>&lt;p&gt;It is possible to view a listing of the directory contents. Directory listings may reveal hidden scripts, include files, backup source files, etc., which can be accessed to reveal sensitive information.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Emails Found in the Viewstate</title>
      <link>/docs/alerts/10032-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10032-2/</guid>
      <description>&lt;p&gt;Email addresses were found being serialized in the viewstate field.&lt;/p&gt;</description>
    </item>
    <item>
      <title>HTTPS Content Available via HTTP</title>
      <link>/docs/alerts/10047/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10047/</guid>
      <description>&lt;p&gt;Content which was initially accessed via HTTPS (i.e.: using SSL/TLS encryption) is also accessible via HTTP (without encryption).&lt;/p&gt;</description>
    </item>
    <item>
      <title>In Page Banner Information Leak</title>
      <link>/docs/alerts/10009/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10009/</guid>
      <description>&lt;p&gt;The server returned a version banner string in the response content. Such information leaks may allow attackers to further target specific issues impacting the product and version in use.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Information Disclosure - Sensitive Information in HTTP Referrer Header</title>
      <link>/docs/alerts/10025/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10025/</guid>
      <description>&lt;p&gt;The HTTP header may have leaked a potentially sensitive parameter to another domain. This can violate PCI and most organizational compliance policies. You can configure the list of strings for this check to add or remove values specific to your environment.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Information Disclosure - Sensitive Information in URL</title>
      <link>/docs/alerts/10024/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10024/</guid>
      <description>&lt;p&gt;The request appeared to contain sensitive information leaked in the URL. This can violate PCI and most organizational compliance policies. You can configure the list of strings for this check to add or remove values specific to your environment.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Insufficient Site Isolation Against Spectre Vulnerability</title>
      <link>/docs/alerts/90004-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/90004-1/</guid>
      <description>&lt;p&gt;Cross-Origin-Resource-Policy header is an opt-in header designed to counter side-channels attacks like Spectre. Resource should be specifically set as shareable amongst different origins.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Insufficient Site Isolation Against Spectre Vulnerability</title>
      <link>/docs/alerts/90004-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/90004-2/</guid>
      <description>&lt;p&gt;Cross-Origin-Embedder-Policy header is a response header that prevents a document from loading any cross-origin resources that don&amp;rsquo;t explicitly grant the document permission (using CORP or CORS).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Insufficient Site Isolation Against Spectre Vulnerability</title>
      <link>/docs/alerts/90004-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/90004-3/</guid>
      <description>&lt;p&gt;Cross-Origin-Opener-Policy header is a response header that allows a site to control if others included documents share the same browsing context. Sharing the same browsing context with untrusted documents might lead to data leak.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Loosely Scoped Cookie</title>
      <link>/docs/alerts/90033/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/90033/</guid>
      <description>&lt;p&gt;Cookies can be scoped by domain or path. This check is only concerned with domain scope.The domain scope applied to a cookie determines which domains can access it. For example, a cookie can be scoped strictly to a subdomain e.g. &lt;a href=&#34;http://www.nottrusted.com&#34;&gt;www.nottrusted.com&lt;/a&gt;, or loosely scoped to a parent domain e.g. nottrusted.com. In the latter case, any subdomain of nottrusted.com can access the cookie. Loosely scoped cookies are common in mega-applications like google.com and live.com. Cookies set from a subdomain like app.foo.bar are transmitted only to that domain by the browser. However, cookies scoped to a parent-level domain may be transmitted to the parent, or any subdomain of the parent.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Missing Anti-clickjacking Header</title>
      <link>/docs/alerts/10020-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10020-1/</guid>
      <description>&lt;p&gt;The response does not protect against &amp;lsquo;ClickJacking&amp;rsquo; attacks. It should include either Content-Security-Policy with &amp;lsquo;frame-ancestors&amp;rsquo; directive or X-Frame-Options.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Modern Web Application</title>
      <link>/docs/alerts/10109/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10109/</guid>
      <description>&lt;p&gt;The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Multiple X-Frame-Options Header Entries</title>
      <link>/docs/alerts/10020-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10020-2/</guid>
      <description>&lt;p&gt;X-Frame-Options (XFO) headers were found, a response with multiple XFO header entries may not be predictably treated by all user-agents.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Non-Storable Content</title>
      <link>/docs/alerts/10049-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10049-1/</guid>
      <description>&lt;p&gt;The response contents are not storable by caching components such as proxy servers. If the response does not contain sensitive, personal or user-specific information, it may benefit from being stored and cached, to improve performance.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Obsolete Content Security Policy (CSP) Header Found</title>
      <link>/docs/alerts/10038-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10038-2/</guid>
      <description>&lt;p&gt;The &amp;ldquo;X-Content-Security-Policy&amp;rdquo; and &amp;ldquo;X-WebKit-CSP&amp;rdquo; headers are no longer recommended.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Old Asp.Net Version in Use</title>
      <link>/docs/alerts/10032-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10032-3/</guid>
      <description>&lt;p&gt;This website uses ASP.NET version 1.0 or 1.1.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Permissions Policy Header Not Set</title>
      <link>/docs/alerts/10063-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10063-1/</guid>
      <description>&lt;p&gt;Permissions Policy Header is an added layer of security that helps to restrict from unauthorized access or usage of browser/client features by web resources. This policy ensures the user privacy by limiting or specifying the features of the browsers can be used by the web resources. Permissions Policy provides a set of standard HTTP headers that allow website owners to limit which features of browsers can be used by the page such as camera, microphone, location, full screen etc.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Potential IP Addresses Found in the Viewstate</title>
      <link>/docs/alerts/10032-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10032-1/</guid>
      <description>&lt;p&gt;Potential IP addresses were found being serialized in the viewstate field.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Proxy Disclosure</title>
      <link>/docs/alerts/40025/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/40025/</guid>
      <description></description>
    </item>
    <item>
      <title>Re-examine Cache-control Directives</title>
      <link>/docs/alerts/10015/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10015/</guid>
      <description>&lt;p&gt;The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Referer Exposes Session ID</title>
      <link>/docs/alerts/3-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/3-3/</guid>
      <description>&lt;p&gt;A hyperlink pointing to another host name was found. As session ID URL rewrite is used, it may be disclosed in referer header to external hosts.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Retrieved from Cache</title>
      <link>/docs/alerts/10050-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10050-1/</guid>
      <description>&lt;p&gt;The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as &amp;ldquo;proxy&amp;rdquo; caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Retrieved from Cache</title>
      <link>/docs/alerts/10050-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10050-2/</guid>
      <description>&lt;p&gt;The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as &amp;ldquo;proxy&amp;rdquo; caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Secure Pages Include Mixed Content</title>
      <link>/docs/alerts/10040/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10040/</guid>
      <description>&lt;p&gt;The page includes mixed content, that is content accessed via HTTP instead of HTTPS.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Server Leaks Information via &#34;X-Powered-By&#34; HTTP Response Header Field(s)</title>
      <link>/docs/alerts/10037/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10037/</guid>
      <description>&lt;p&gt;The web/application server is leaking information via one or more &amp;ldquo;X-Powered-By&amp;rdquo; HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Server Leaks its Webserver Application via &#34;Server&#34; HTTP Response Header Field</title>
      <link>/docs/alerts/10036-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10036-1/</guid>
      <description>&lt;p&gt;The web/application server is leaking the application it uses as a webserver via the &amp;ldquo;Server&amp;rdquo; HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to. This information alone, i.e. without a version string, is not very dangerous for the security of a server, nevertheless this information in the response header field is almost always useless and thus just an obsolete attacking vector.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Server Leaks Version Information via &#34;Server&#34; HTTP Response Header Field</title>
      <link>/docs/alerts/10036-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10036-2/</guid>
      <description>&lt;p&gt;The web/application server is leaking version information via the &amp;ldquo;Server&amp;rdquo; HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Session ID in URL Rewrite</title>
      <link>/docs/alerts/3-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/3-1/</guid>
      <description>&lt;p&gt;URL rewrite is used to track user session ID. The session ID may be disclosed via cross-site referer header. In addition, the session ID might be stored in browser history or server logs.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Session ID in URL Rewrite</title>
      <link>/docs/alerts/3-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/3-2/</guid>
      <description>&lt;p&gt;URL rewrite is used to track user session ID. The session ID may be disclosed via cross-site referer header. In addition, the session ID might be stored in browser history or server logs.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Split Viewstate in Use</title>
      <link>/docs/alerts/10032-6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10032-6/</guid>
      <description>&lt;p&gt;This website uses ASP.NET&amp;rsquo;s Viewstate and its value is split into several chunks.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Storable and Cacheable Content</title>
      <link>/docs/alerts/10049-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10049-3/</guid>
      <description>&lt;p&gt;The response contents are storable by caching components such as proxy servers, and may be retrieved directly from the cache, rather than from the origin server by the caching servers, in response to similar requests from other users. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where &amp;ldquo;shared&amp;rdquo; caching servers such as &amp;ldquo;proxy&amp;rdquo; caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Storable but Non-Cacheable Content</title>
      <link>/docs/alerts/10049-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10049-2/</guid>
      <description>&lt;p&gt;The response contents are storable by caching components such as proxy servers, but will not be retrieved directly from the cache, without validating the request upstream, in response to similar requests from other users.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Strict-Transport-Security Defined via META (Non-compliant with Spec)</title>
      <link>/docs/alerts/10035-6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10035-6/</guid>
      <description>&lt;p&gt;A HTTP Strict Transport Security (HSTS) META tag was found, defining HTTP Strict Transport Security (HSTS) via a META tag is explicitly not supported by the spec (RFC 6797).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Strict-Transport-Security Disabled</title>
      <link>/docs/alerts/10035-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10035-2/</guid>
      <description>&lt;p&gt;A HTTP Strict Transport Security (HSTS) header was found, but it contains the directive max-age=0 which disables the control and instructs browsers to reset any previous HSTS related settings. See RFC 6797 for further details.&#xA;HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Strict-Transport-Security Header Not Set</title>
      <link>/docs/alerts/10035-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10035-1/</guid>
      <description>&lt;p&gt;HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Strict-Transport-Security Header on Plain HTTP Response</title>
      <link>/docs/alerts/10035-4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10035-4/</guid>
      <description>&lt;p&gt;A HTTP Strict Transport Security (HSTS) header was found, but HSTS headers are ignored on plain (non-HTTPS) responses.&#xA;HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Strict-Transport-Security Malformed Content (Non-compliant with Spec)</title>
      <link>/docs/alerts/10035-8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10035-8/</guid>
      <description>&lt;p&gt;A HTTP Strict Transport Security (HSTS) header was found, but it contains some content that was not expected (perhaps curly quotes), the expectation is that the content be printable ASCII characters.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Strict-Transport-Security Max-Age Malformed (Non-compliant with Spec)</title>
      <link>/docs/alerts/10035-7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10035-7/</guid>
      <description>&lt;p&gt;A HTTP Strict Transport Security (HSTS) header was found, but it contains quotes preceding the max-age directive (the max-age value can be quoted, but the directive itself cannot be). See RFC 6797 for further details.&#xA;HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Strict-Transport-Security Missing Max-Age (Non-compliant with Spec)</title>
      <link>/docs/alerts/10035-5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10035-5/</guid>
      <description>&lt;p&gt;A HTTP Strict Transport Security (HSTS) header was found, but it is missing the max-age directive (or the directive is missing a value). See RFC 6797 for further details.&#xA;HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Strict-Transport-Security Multiple Header Entries (Non-compliant with Spec)</title>
      <link>/docs/alerts/10035-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10035-3/</guid>
      <description>&lt;p&gt;HTTP Strict Transport Security (HSTS) headers were found, a response with multiple HSTS header entries is not compliant with the specification (RFC 6797) and only the first HSTS header will be processed others will be ignored by user agents or the HSTS policy may be incorrectly applied.&#xA;HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Sub Resource Integrity Attribute Missing</title>
      <link>/docs/alerts/90003/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/90003/</guid>
      <description>&lt;p&gt;The integrity attribute is missing on a script or link tag served by an external server. The integrity tag prevents an attacker who have gained access to this server from injecting a malicious content.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Timestamp Disclosure - Unix</title>
      <link>/docs/alerts/10096/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10096/</guid>
      <description>&lt;p&gt;A timestamp was disclosed by the application/web server. - Unix&lt;/p&gt;</description>
    </item>
    <item>
      <title>User Agent Fuzzer</title>
      <link>/docs/alerts/10104/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10104/</guid>
      <description>&lt;p&gt;Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.&lt;/p&gt;</description>
    </item>
    <item>
      <title>User Controllable Charset</title>
      <link>/docs/alerts/10030/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10030/</guid>
      <description>&lt;p&gt;This check looks at user-supplied input in query string parameters and POST data to identify where Content-Type or meta tag charset declarations might be user-controlled. Such charset declarations should always be declared by the application. If an attacker can control the response charset, they could manipulate the HTML to perform XSS or other attacks. For example, an attacker controlling the &lt;!-- raw HTML omitted --&gt; element charset value is able to declare UTF-7 and is also able to include enough user-controlled payload early in the HTML document to have it interpreted as UTF-7. By encoding their payload with UTF-7 the attacker is able to bypass any server-side XSS protections and embed script in the page.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Viewstate without MAC Signature (Sure)</title>
      <link>/docs/alerts/10032-5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10032-5/</guid>
      <description>&lt;p&gt;This website uses ASP.NET&amp;rsquo;s Viewstate but without any MAC.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Viewstate without MAC Signature (Unsure)</title>
      <link>/docs/alerts/10032-4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10032-4/</guid>
      <description>&lt;p&gt;This website uses ASP.NET&amp;rsquo;s Viewstate but maybe without any MAC.&lt;/p&gt;</description>
    </item>
    <item>
      <title>X-AspNet-Version Response Header</title>
      <link>/docs/alerts/10061/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10061/</guid>
      <description>&lt;p&gt;Server leaks information via &amp;ldquo;X-AspNet-Version&amp;rdquo;/&amp;ldquo;X-AspNetMvc-Version&amp;rdquo; HTTP response header field(s).&lt;/p&gt;</description>
    </item>
    <item>
      <title>X-Backend-Server Header Information Leak</title>
      <link>/docs/alerts/10039/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10039/</guid>
      <description>&lt;p&gt;The server is leaking information pertaining to backend systems (such as hostnames or IP addresses). Armed with this information an attacker may be able to attack other systems or more directly/efficiently attack those systems.&lt;/p&gt;</description>
    </item>
    <item>
      <title>X-ChromeLogger-Data (XCOLD) Header Information Leak</title>
      <link>/docs/alerts/10052/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10052/</guid>
      <description>&lt;p&gt;The server is leaking information through the X-ChromeLogger-Data (or X-ChromePhp-Data) response header. The content of such headers can be customized by the developer, however it is not uncommon to find: server file system locations, vhost declarations, etc.&lt;/p&gt;</description>
    </item>
    <item>
      <title>X-Content-Type-Options Header Missing</title>
      <link>/docs/alerts/10021/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10021/</guid>
      <description>&lt;p&gt;The Anti-MIME-Sniffing header X-Content-Type-Options was not set to &amp;rsquo;nosniff&amp;rsquo;. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.&lt;/p&gt;</description>
    </item>
    <item>
      <title>X-Debug-Token Information Leak</title>
      <link>/docs/alerts/10056/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10056/</guid>
      <description>&lt;p&gt;The response contained an X-Debug-Token or X-Debug-Token-Link header. This indicates that Symfony&amp;rsquo;s Profiler may be in use and exposing sensitive data.&lt;/p&gt;</description>
    </item>
    <item>
      <title>X-Frame-Options Defined via META (Non-compliant with Spec)</title>
      <link>/docs/alerts/10020-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10020-3/</guid>
      <description>&lt;p&gt;An X-Frame-Options (XFO) META tag was found, defining XFO via a META tag is explicitly not supported by the spec (RFC 7034).&lt;/p&gt;</description>
    </item>
    <item>
      <title>X-Frame-Options Setting Malformed</title>
      <link>/docs/alerts/10020-4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10020-4/</guid>
      <description>&lt;p&gt;An X-Frame-Options header was present in the response but the value was not correctly set.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
