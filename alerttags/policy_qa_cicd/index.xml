<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>POLICY_QA_CICD on ZAP</title>
    <link>/alerttags/policy_qa_cicd/</link>
    <description>Recent content in POLICY_QA_CICD on ZAP</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="/alerttags/policy_qa_cicd/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Anti-CSRF Tokens Check</title>
      <link>/docs/alerts/20012/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/20012/</guid>
      <description>&lt;p&gt;A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CORS Header</title>
      <link>/docs/alerts/40040-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/40040-1/</guid>
      <description>&lt;p&gt;Cross-Origin Resource Sharing (CORS) is an HTTP-header based mechanism that allows a server to indicate any other origins (domain, scheme, or port) than its own from which a browser should permit loading of resources. It relaxes the Same-Origin Policy (SOP).&lt;/p&gt;</description>
    </item>
    <item>
      <title>CORS Misconfiguration</title>
      <link>/docs/alerts/40040-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/40040-2/</guid>
      <description>&lt;p&gt;This CORS misconfiguration could allow an attacker to perform AJAX queries to the vulnerable website from a malicious page loaded by the victim&amp;rsquo;s user agent.&#xA;In order to perform authenticated AJAX queries, the server must specify the header &amp;ldquo;Access-Control-Allow-Credentials: true&amp;rdquo; and the &amp;ldquo;Access-Control-Allow-Origin&amp;rdquo; header must be set to null or the malicious page&amp;rsquo;s domain. Even if this misconfiguration doesn&amp;rsquo;t allow authenticated AJAX requests, unauthenticated sensitive content can still be accessed (e.g intranet websites).&#xA;A malicious page can belong to a malicious website but also a trusted website with flaws (e.g XSS, support of HTTP without TLS allowing code injection through MITM, etc).&lt;/p&gt;</description>
    </item>
    <item>
      <title>CORS Misconfiguration</title>
      <link>/docs/alerts/40040-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/40040-3/</guid>
      <description>&lt;p&gt;This CORS misconfiguration could allow an attacker to perform AJAX queries to the vulnerable website from a malicious page loaded by the victim&amp;rsquo;s user agent.&#xA;In order to perform authenticated AJAX queries, the server must specify the header &amp;ldquo;Access-Control-Allow-Credentials: true&amp;rdquo; and the &amp;ldquo;Access-Control-Allow-Origin&amp;rdquo; header must be set to null or the malicious page&amp;rsquo;s domain. Even if this misconfiguration doesn&amp;rsquo;t allow authenticated AJAX requests, unauthenticated sensitive content can still be accessed (e.g intranet websites).&#xA;A malicious page can belong to a malicious website but also a trusted website with flaws (e.g XSS, support of HTTP without TLS allowing code injection through MITM, etc).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cross Site Scripting (Reflected)</title>
      <link>/docs/alerts/40012/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/40012/</guid>
      <description>&lt;p&gt;Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user&amp;rsquo;s browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.&#xA;When an attacker gets a user&amp;rsquo;s browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Directory Browsing</title>
      <link>/docs/alerts/0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/0/</guid>
      <description>&lt;p&gt;It is possible to view the directory listing. Directory listing may reveal hidden scripts, include files, backup source files, etc. which can be accessed to read sensitive information.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Exponential Entity Expansion (Billion Laughs Attack)</title>
      <link>/docs/alerts/40044/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/40044/</guid>
      <description>&lt;p&gt;An exponential entity expansion, or &amp;ldquo;billion laughs&amp;rdquo; attack is a type of denial-of-service (DoS) attack. It is aimed at parsers of markup languages like XML or YAML that allow macro expansions.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Expression Language Injection</title>
      <link>/docs/alerts/90025/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/90025/</guid>
      <description>&lt;p&gt;The software constructs all or part of an expression language (EL) statement in a Java Server Page (JSP) using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended EL statement before it is executed. In certain versions of Spring 3.0.5 and earlier, there was a vulnerability (CVE-2011-2730) in which Expression Language tags would be evaluated twice, which effectively exposed any application to EL injection. However, even for later versions, this weakness is still possible depending on configuration.&lt;/p&gt;</description>
    </item>
    <item>
      <title>External Redirect</title>
      <link>/docs/alerts/20019-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/20019-1/</guid>
      <description>&lt;p&gt;URL redirectors represent common functionality employed by web sites to forward an incoming request to an alternate resource. This can be done for a variety of reasons and is often done to allow resources to be moved within the directory structure and to avoid breaking functionality for users that request the resource at its previous location. URL redirectors may also be used to implement load balancing, leveraging abbreviated URLs or recording outgoing links. It is this last implementation which is often used in phishing attacks as described in the example below. URL redirectors do not necessarily represent a direct security vulnerability but can be abused by attackers trying to social engineer victims into believing that they are navigating to a site other than the true destination.&lt;/p&gt;</description>
    </item>
    <item>
      <title>External Redirect</title>
      <link>/docs/alerts/20019-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/20019-2/</guid>
      <description>&lt;p&gt;URL redirectors represent common functionality employed by web sites to forward an incoming request to an alternate resource. This can be done for a variety of reasons and is often done to allow resources to be moved within the directory structure and to avoid breaking functionality for users that request the resource at its previous location. URL redirectors may also be used to implement load balancing, leveraging abbreviated URLs or recording outgoing links. It is this last implementation which is often used in phishing attacks as described in the example below. URL redirectors do not necessarily represent a direct security vulnerability but can be abused by attackers trying to social engineer victims into believing that they are navigating to a site other than the true destination.&lt;/p&gt;</description>
    </item>
    <item>
      <title>External Redirect</title>
      <link>/docs/alerts/20019-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/20019-3/</guid>
      <description>&lt;p&gt;URL redirectors represent common functionality employed by web sites to forward an incoming request to an alternate resource. This can be done for a variety of reasons and is often done to allow resources to be moved within the directory structure and to avoid breaking functionality for users that request the resource at its previous location. URL redirectors may also be used to implement load balancing, leveraging abbreviated URLs or recording outgoing links. It is this last implementation which is often used in phishing attacks as described in the example below. URL redirectors do not necessarily represent a direct security vulnerability but can be abused by attackers trying to social engineer victims into believing that they are navigating to a site other than the true destination.&lt;/p&gt;</description>
    </item>
    <item>
      <title>External Redirect</title>
      <link>/docs/alerts/20019-4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/20019-4/</guid>
      <description>&lt;p&gt;URL redirectors represent common functionality employed by web sites to forward an incoming request to an alternate resource. This can be done for a variety of reasons and is often done to allow resources to be moved within the directory structure and to avoid breaking functionality for users that request the resource at its previous location. URL redirectors may also be used to implement load balancing, leveraging abbreviated URLs or recording outgoing links. It is this last implementation which is often used in phishing attacks as described in the example below. URL redirectors do not necessarily represent a direct security vulnerability but can be abused by attackers trying to social engineer victims into believing that they are navigating to a site other than the true destination.&lt;/p&gt;</description>
    </item>
    <item>
      <title>GET for POST</title>
      <link>/docs/alerts/10058/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/10058/</guid>
      <description>&lt;p&gt;A request that was originally observed as a POST was also accepted as a GET. This issue does not represent a security weakness unto itself, however, it may facilitate simplification of other attacks. For example if the original POST is subject to Cross-Site Scripting (XSS), then this finding may indicate that a simplified (GET based) XSS may also be possible.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Remote OS Command Injection</title>
      <link>/docs/alerts/90020/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/90020/</guid>
      <description>&lt;p&gt;Attack technique used for unauthorized execution of operating system commands. This attack is possible when an application accepts untrusted input to build operating system commands in an insecure manner involving improper data sanitization, and/or improper calling of external programs.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Remote OS Command Injection (Time Based)</title>
      <link>/docs/alerts/90037/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/90037/</guid>
      <description>&lt;p&gt;Attack technique used for unauthorized execution of operating system commands. This attack is possible when an application accepts untrusted input to build operating system commands in an insecure manner involving improper data sanitization, and/or improper calling of external programs.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Server Side Include</title>
      <link>/docs/alerts/40009/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/40009/</guid>
      <description>&lt;p&gt;Certain parameters may cause Server Side Include commands to be executed. This may allow database connection or arbitrary code to be executed.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Server Side Template Injection</title>
      <link>/docs/alerts/90035/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/90035/</guid>
      <description>&lt;p&gt;When the user input is inserted in the template instead of being used as argument in rendering is evaluated by the template engine. Depending on the template engine it can lead to remote code execution.&lt;/p&gt;</description>
    </item>
    <item>
      <title>SOAP Action Spoofing</title>
      <link>/docs/alerts/90026/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/90026/</guid>
      <description>&lt;p&gt;An unintended SOAP operation was executed by the server.&lt;/p&gt;</description>
    </item>
    <item>
      <title>SOAP XML Injection</title>
      <link>/docs/alerts/90029/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/90029/</guid>
      <description>&lt;p&gt;Some XML injected code has been interpreted by the server.&lt;/p&gt;</description>
    </item>
    <item>
      <title>SQL Injection</title>
      <link>/docs/alerts/40018/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/40018/</guid>
      <description>&lt;p&gt;SQL injection may be possible.&lt;/p&gt;</description>
    </item>
    <item>
      <title>XML External Entity Attack</title>
      <link>/docs/alerts/90023/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/90023/</guid>
      <description>&lt;p&gt;This technique takes advantage of a feature of XML to build documents dynamically at the time of processing. An XML message can either provide data explicitly or by pointing to an URI where the data exists. In the attack technique, external entities may replace the entity value with malicious data, alternate referrals or may compromise the security of the data the server/XML application has access to.&#xA;Attackers may also use External Entities to have the web services server download malicious code or content to the server for use in secondary or follow on attacks.&lt;/p&gt;</description>
    </item>
    <item>
      <title>XPath Injection</title>
      <link>/docs/alerts/90021/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/90021/</guid>
      <description>&lt;p&gt;XPath Injection is an attack technique used to exploit applications that construct XPath (XML Path Language) queries from user-supplied input to query or navigate XML documents. It can be used directly by an application to query an XML document, as part of a larger operation such as applying an XSLT transformation to an XML document, or applying an XQuery to an XML document. The syntax of XPath bears some resemblance to an SQL query, and indeed, it is possible to form SQL-like queries on an XML document using XPath.&lt;/p&gt;</description>
    </item>
    <item>
      <title>XSLT Injection</title>
      <link>/docs/alerts/90017/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/alerts/90017/</guid>
      <description>&lt;p&gt;Injection using XSL transformations may be possible, and may allow an attacker to read system information, read and write files, or execute arbitrary code.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
